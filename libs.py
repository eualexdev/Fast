########################################
# Lins for "Fast" Language !           #
########################################
# Coding By Jos√© Alexsandro            #
# Github: https://github.com/eualexdev #
########################################


print_fast = [["<iostream>"],r"""/*
 * Write in Terminal
*/
template <class print_template>
print_template print(print_template values){
std::cout << values << std::endl;
};
"""]

input_fast = [["<iostream>","<cstring>"],r"""/*
 * input
 * get input of the user
*/

template <typename T>
char * input(T value = ""){
std::string s;
std::cout<<value;
std::getline(std::cin, s);
char *a =new char[s.size()+1];
a[s.size()]=0;
std::memcpy(a,s.c_str(),s.size());
size_t u = strlen(a);
if (u == 0)
    a = "";
return a;
}
"""] 

types_fast = [["<iostream>","<typeinfo>","<stdlib.h>","<cstring>"],r"""/*
 * The Types
 * Type Converters and Type Identifiers
 * Code snippet generated by the language
 * Code in C++
*/


/* 
 * sendExcptions
 * Will put an error in the terminal
*/
template <class any>
any sendException (char * message,any &memorie,any value){
std::cout << "\nErro in Executable - " << 
message
<< "\nMemory address: " << &memorie 
<< "\nValue: " << value << std::endl;
exit(0);
return "null";
};

/*
 * type
 * take the kind of something
*/
template <typename any>
char * type(any value){
const char * __type_return;
if (*(typeid(value).name()) == 'i' || *(typeid(value).name()) == 'l' || *(typeid(value).name()) == 'x'){
    __type_return = "int";
} else if (*(typeid(value).name()) == 'c'){
    __type_return = "char";        
} else if (*(typeid(value).name()) == 'P'){
    __type_return = "string";
} else if (*(typeid(value).name()) == 'b'){
    __type_return = "bool";
} else if (*(typeid(value).name()) == 'f' || *(typeid(value).name()) == 'd' || *(typeid(value).name()) == 'e'){
    __type_return = "float";
} else {
    // std::cout << typeid(value).name() << std::endl;
    __type_return = "std::string";
}
return (char *)__type_return;
}

/*
 * stringToInt
 * convert string to int
*/
long stringToInt(char * _value){
int _start = 0;
int _end = strlen(_value);
std::string o_value;
while (_start != _end)
{
if (_value[_start] != ' '){
o_value += _value[_start];
}
_start +=1;
}
bool convert = false;
char *value =new char[o_value.size()+1];

value[o_value.size()]=0;
std::memcpy(value,o_value.c_str(),o_value.size());
int start = 0;
int end = strlen(value);
if (end == 0){
sendException("It is only possible to convert valid strings to int",_value,_value);
}
while (start != end){
if (
value[start] == '0' ||
value[start] == '1' ||
value[start] == '2' ||
value[start] == '3' ||
value[start] == '4' ||
value[start] == '5' ||
value[start] == '6' ||
value[start] == '7' ||
value[start] == '8' ||
value[start] == '9'
){
convert = true;
} else {
char a = value[start+1];
if (
a == '0' ||
a == '1' ||
a == '2' ||
a == '3' ||
a == '4' ||
a == '5' ||
a == '6' ||
a == '7' ||
a == '8' ||
a == '9'
){

} else {
sendException("It is only possible to convert valid strings to int",_value,_value);
}
}
start ++;
}
if (convert == true){

long v = strtol(value, NULL, 10);
return v;
}  else {
sendException("It is only possible to convert valid strings to int",_value,_value);
}

}
"""
]